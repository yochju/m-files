! Copyright (C) 2015, 2016 Laurent Hoeltgen <hoeltgen@b-tu.de>
!
! This program is free software: you can redistribute it and/or modify it under
! the terms of the GNU General Public License as published by the Free Software
! Foundation, either version 3 of the License, or (at your option) any later
! version.
!
! This program is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
! FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with
! this program. If not, see <http://www.gnu.org/licenses/>.

#:setvar ikinds [ 'INT32',  'INT64' ]
#:setvar rkinds [ 'REAL32', 'REAL64' ]
module array
    !! author: Laurent Hoeltgen
    !! date:   01/08/2016
    !! license: GPL
    use iso_fortran_env
    implicit none
    private

    public :: ind2sub
    interface ind2sub
#:for itype in ikinds
        module procedure ind2sub_${itype}$
#:endfor            
    end interface ind2sub

    public :: sub2ind
    interface sub2ind
#:for itype in ikinds
        module procedure sub2ind_${itype}$
#:endfor            
    end interface sub2ind

    public :: add0padding
    interface add0padding
#:for itype in ikinds            
        module procedure add0padding_${itype}$
#:for rtype in rkinds
        module procedure add0padding_${itype}$_${rtype}$
#:endfor            
#:endfor        
    end interface add0padding

    public :: mirror
    interface mirror
#:for rtype in rkinds
#:for itype in ikinds            
        module procedure mirror_1_${itype}$_${rtype}$
        module procedure mirror_2_${itype}$_${rtype}$
        module procedure mirror_3_${itype}$_${rtype}$
#:endfor            
#:endfor            
    end interface mirror

contains

    ! Convert single integer index into subscript array
    ! rnk       Size of dims array
    ! dims      Extend of the array along each dimension from 1 to rnk.
    ! offsetIn  Offset of the input index.
    ! offsetOut Offset of the output subscripts
    ! ind       Index to be converted to a subscript
    ! sub       Corresponding subscript
#:for itype in ikinds
    pure recursive function ind2sub_${itype}$ (dims, offsetIn, offsetOut, ind) result(sub)
        implicit none

        integer(${itype}$), intent(in), dimension(:) :: dims
        integer(${itype}$), intent(in)               :: offsetIn
        integer(${itype}$), intent(in)               :: offsetOut
        integer(${itype}$), intent(in)               :: ind

        integer(${itype}$), dimension(size(dims)) :: sub

        integer(${itype}$) :: siz ! helper variable
        integer(${itype}$) :: rnk

        rnk = size(dims)

        ! The algorithm works recusively. Along each dimension it places as
        ! much as possible into the current subscript position. The remaining
        ! indices are passed to the next subscript position.
        if (1 < rnk) then
            siz = product (dims(1:(rnk-1)))
            sub(rnk) = int ((ind-offsetIn)/siz) + offsetOut
            sub(1:(rnk-1)) =  ind2sub_${itype}$ (dims(1:(rnk-1)), offsetIn, offsetOut, ind - siz * int ((ind-offsetIn)/siz))
        else
            sub(rnk) = ind - offsetIn + offsetOut
        endif
    end function ind2sub_${itype}$
#:endfor

    ! Converts subscript array into single index
    ! rnk       Size of dims array
    ! dims      Extend of the array along each dimension from 1 to rnk.
    ! offsetIn  Offset of the input index.
    ! offsetOut Offset of the output subscripts
    ! sub       subscript array to be convert into single index
    ! ind       Corresponding index
#:for itype in ikinds
    pure recursive function sub2ind_${itype}$ (dims, offsetIn, offsetOut, sub) result(ind)
        implicit none

        integer(${itype}$), intent(in), dimension(:)          :: dims
        integer(${itype}$), intent(in)                        :: offsetIn
        integer(${itype}$), intent(in)                        :: offsetOut
        integer(${itype}$), intent(in), dimension(size(dims)) :: sub

        integer(${itype}$) :: ind

        integer(${itype}$) :: rnk

        rnk = size(dims)

        ! The algorithm works recursively. For each subscript we compute the
        ! size of the corresponding dimension and add everything up.
        ind = 0
        if (1 < rnk) then
            ind =  sub2ind_${itype}$ (dims(1:(rnk-1)), offsetIn, offsetOut, sub(1:(rnk-1)))
            ind = ind + (sub(rnk) - offsetIn) * product (dims(1:(rnk-1)))
        else
            ind = sub(1) - offsetIn + offsetOut
        endif
    end function sub2ind_${itype}$
#:endfor

    ! if I enable bounds checking in gfortran, then this function fails. It seems that product(siz+2*padding)
    ! cannot be determined correctly. This appears to be bug in gfortran.
#:for itype in ikinds        
    pure recursive function add0padding_${itype}$ (siz, padding, sig) result(y)
        use miscfun, only: cumprod
        implicit none

        integer(${itype}$), dimension(:),            intent(in) :: siz
        integer(${itype}$), dimension(size(siz)),    intent(in) :: padding
        integer(${itype}$), dimension(product(siz)), intent(in) :: sig

        integer(${itype}$), dimension(product(siz+2*padding)) :: y

        integer(${itype}$), dimension(size(siz)) :: csp, csz
        integer(${itype}$)                       :: ii, last

        y(1:product(siz+2*padding)) = 0

        if (size(siz) == 1) then
            y((padding(1) + 1):(padding(1) + siz(1))) = sig
        else
            csp = cumprod(siz + 2*padding)
            csz = cumprod(siz)

            last = ubound(siz,1)
            do ii=1, siz(last)
                y( (csp(last-1)*padding(last)+(ii-1)*csp(last-1)+1): &
                        (csp(last-1)*padding(last)+(ii-1)*csp(last-1)+csp(last-1)) ) = &
                        add0padding_${itype}$( siz(1:last-1), padding(1:last-1), &
                        sig( ((ii-1)*csz(last-1) + 1):((ii-1)*csz(last-1) + csz(last-1)) ))
            end do
        end if
    end function add0padding_${itype}$

#:for rtype in rkinds        
    pure recursive function add0padding_${itype}$_${rtype}$ (siz, padding, sig) result(y)
        use miscfun, only: cumprod
        implicit none

        integer(${itype}$), dimension(:),            intent(in) :: siz
        integer(${itype}$), dimension(size(siz)),    intent(in) :: padding
        real(${rtype}$),   dimension(product(siz)), intent(in) :: sig

        real(${rtype}$), dimension(product(siz+2*padding)) :: y

        integer(${itype}$), dimension(size(siz)) :: csp, csz
        integer(${itype}$)                       :: ii, last

        y(1:product(siz+2*padding)) = 0_${rtype}$

        if (size(siz) == 1) then
            y((padding(1) + 1):(padding(1) + siz(1))) = sig
        else
            csp = cumprod(siz + 2*padding)
            csz = cumprod(siz)

            last = ubound(siz,1)
            do ii = 1, siz(last)
                y( (csp(last-1)*padding(last)+(ii-1)*csp(last-1)+1): &
                        (csp(last-1)*padding(last)+(ii-1)*csp(last-1)+csp(last-1)) ) = &
                        add0padding_${itype}$_${rtype}$( siz(1:last-1), padding(1:last-1), &
                        sig( ((ii-1)*csz(last-1) + 1):((ii-1)*csz(last-1) + csz(last-1)) ))
            end do
        end if
    end function add0padding_${itype}$_${rtype}$
#:endfor
#:endfor        

#:for rtype in rkinds
#:for itype in ikinds
    pure subroutine mirror_1_${itype}$_${rtype}$ (n, x, y)
        implicit none

        integer(${itype}$), intent(in)                  :: n
        real(${rtype}$),  intent(in),  dimension(n)   :: x
        real(${rtype}$),  intent(out), dimension(n+2) :: y

        y = 0_${rtype}$

        y(2:(n+1)) = x

        y(  1) = x(1)
        y(n+2) = x(n)
    end subroutine mirror_1_${itype}$_${rtype}$

    pure subroutine mirror_2_${itype}$_${rtype}$ (nr, nc, x, y)
        implicit none

        integer(${itype}$), intent(in)                        :: nr
        integer(${itype}$), intent(in)                        :: nc
        real(${rtype}$),  intent(in),  dimension(nr,  nc)   :: x
        real(${rtype}$),  intent(out), dimension(nr+2,nc+2) :: y

        y = 0_${rtype}$

        y(2:(nr+1),2:(nc+1)) = x

        y(2:(nr+1), 1   ) = x(1:nr,  1)
        y(2:(nr+1), nc+2) = x(1:nr, nc)

        y(1,    2:(nc+1)) = x(1 , 1:nc)
        y(nr+2, 2:(nc+1)) = x(nr, 1:nc)

        y(1,       1) = x(1,   1)
        y(1,    nc+2) = x(1,  nc)
        y(nr+2,    1) = x(nr,  1)
        y(nr+2, nc+2) = x(nr, nc)
    end subroutine mirror_2_${itype}$_${rtype}$

    pure subroutine mirror_3_${itype}$_${rtype}$ (nr, nc, nd, x, y)
        implicit none

        integer(${itype}$), intent(in)                             :: nr
        integer(${itype}$), intent(in)                             :: nc
        integer(${itype}$), intent(in)                             :: nd
        real(${rtype}$),  intent(in),  dimension(nr,  nc,  nd)   :: x
        real(${rtype}$),  intent(out), dimension(nr+2,nc+2,nd+2) :: y

        integer(${itype}$) :: ii

        y = 0_${rtype}$

        ! Mirror all interior frames.
        do ii = 1, nd
            call mirror_2_${itype}$_${rtype}$ (nr, nc, x(1:nr, 1:nc, ii), y(1:(nr+2), 1:(nc+2), ii+1))
        end do

        ! Mirror 1st and last frame.
        y(1:(nr+2), 1:(nc+2),    1) = y(1:(nr+2), 1:(nc+2),    2)
        y(1:(nr+2), 1:(nc+2), nd+2) = y(1:(nr+2), 1:(nc+2), nd+1)
    end subroutine mirror_3_${itype}$_${rtype}$
#:endfor
#:endfor

end module array
