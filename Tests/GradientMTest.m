function tests = GradientMTest ()
%% Unit test for method GradientM
tests = functiontests (localfunctions);
end

function RowNeumannTest (testcase)
optsR = struct('GridSize', 2);
optsC = struct('GridSize', 0.5);
[M, cons] = GradientM (3, 4, 'boundaryR', 'Neumann', 'knotsR', [-1, 0, 1], ...
    'boundaryC', 'Neumann', 'knotsC', [0, 1], 'optsR', optsR, 'optsC', ...
    optsC, 'labeling', 'row');
sol = sparse([
    -0.25,  0.25,     0,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
    -0.25,     0,  0.25,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,    -0.25,     0,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0, -0.25,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,  0.25,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,     0,  0.25,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0,     0, -0.25,     0,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0, -0.25,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,  0.25,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0,     0, -0.25,  0.25; ...
    -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0; ...
     0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0; ...
     0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0; ...
     0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0; ...
     0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0; ...
     0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0; ...
     0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0; ...
     0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]);
verifyEqual (testcase, sol, M);
verifyEqual (testcase, cons, 1);
end

function RowDirichletTest (testcase)
optsR = struct('GridSize', 2);
optsC = struct('GridSize', 0.5);
[M, cons] = GradientM (3, 4, 'boundaryR', 'Dirichlet', 'knotsR', [-1, 0, 1], ...
    'boundaryC', 'Dirichlet', 'knotsC', [0, 1], 'optsR', optsR, 'optsC', ...
    optsC, 'labeling', 'row');
sol = sparse([
     0,     0.25,     0,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
    -0.25,     0,  0.25,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,    -0.25,     0,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0, -0.25,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0,     0,  0.25,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,     0,  0.25,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0,     0, -0.25,     0,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0, -0.25,     0,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0,  0.25,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0,     0, -0.25,     0; ...
    -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0; ...
     0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0; ...
     0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0; ...
     0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0; ...
     0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0; ...
     0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0; ...
     0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0; ...
     0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2; ...
     0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2]);
verifyEqual (testcase, sol, M);
verifyEqual (testcase, cons, 1);
end

function RowMixedTest (testcase)
optsR = struct('GridSize', 2);
optsC = struct('GridSize', 0.5);
[M, cons] = GradientM (3, 4, 'boundaryR', 'Neumann', 'knotsR', [-1, 0, 1], ...
    'boundaryC', 'Dirichlet', 'knotsC', [0, 1], 'optsR', optsR, 'optsC', ...
    optsC, 'labeling', 'row');
sol = sparse([
    -0.25,  0.25,     0,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
    -0.25,     0,  0.25,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,    -0.25,     0,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0, -0.25,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,  0.25,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,     0,  0.25,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0,     0, -0.25,     0,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0, -0.25,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,  0.25,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0,     0, -0.25,  0.25; ...
    -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0; ...
     0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0; ...
     0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0; ...
     0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0; ...
     0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0; ...
     0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0; ...
     0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0; ...
     0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2; ...
     0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2]);
verifyEqual (testcase, sol, M);
verifyEqual (testcase, cons, 1);

optsR = struct('GridSize', 2);
optsC = struct('GridSize', 0.5);
[M, cons] = GradientM (3, 4, 'boundaryR', 'Neumann', 'knotsR', [-1, 0, 1], ...
    'boundaryC', 'Dirichlet', 'knotsC', [0, 1], 'optsR', optsR, 'optsC', ...
    optsC, 'labeling', 'row');
sol = sparse([
    -0.25,  0.25,     0,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
    -0.25,     0,  0.25,     0,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,    -0.25,     0,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0, -0.25,  0.25,     0,     0,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,  0.25,     0,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0, -0.25,     0,  0.25,    0,      0,     0,     0,     0; ...
     0,        0,     0,     0,     0, -0.25,     0,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0, -0.25,  0.25,     0,     0,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,  0.25,     0,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25,     0; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0, -0.25,     0,  0.25; ...
     0,        0,     0,     0,     0,     0,     0,     0,     0,     0, -0.25,  0.25; ...
    -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0; ...
     0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0; ...
     0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0,  0; ...
     0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0,  0; ...
     0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0,  0; ...
     0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0,  0; ...
     0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2,  0; ...
     0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  2; ...
     0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2,  0; ...
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -2]);
verifyEqual (testcase, sol, M);
verifyEqual (testcase, cons, 1);
end

function ColNeumannTest (testcase)
verifyEqual (testcase, 1, 1);
end

function ColDirichletTest (testcase)
verifyEqual (testcase, 1, 1);
end

function ColMixedTest (testcase)
verifyEqual (testcase, 1, 1);
end